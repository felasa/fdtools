diff0 <- function(x) {
if (!is.vector(x)) stop("Muste be vetor")
return(c(0,diff(x)))
}
diff0(1:5)
diff0(1:5, lag=2)
diff0 <- function(x, ...) {
if (!is.vector(x)) stop("Muste be vetor")
return(c(0,diff(x , ...)))
}
diff0(1:5, lag=2)
diff0(1:5, lag=5)
diff0(1:5, lag=4)
diff0(1:5, lag=3)
1:5
library(fdtools)
library(fdtools)
library(fdtools)
RColorBrewer::brewer.pal(9, "Greys")
library(fdtools)
standarize_text <- function(character) {
character <- tolower_character
character <- remove_accents(character)
}
remove_accents <- function(character) {
character <- gsub("á|à",a,character)
character <- gsub("é|è",a,character)
character <- gsub("í|ì",a,character)
character <- gsub("ó|ò",a,character)
character <- gsub("ú|ù",a,character)
}
standarize_text <- c("Aasas éeeeé", "AASAS eeeee")
standarize_text <- function(character) {
character <- tolower_character
character <- remove_accents(character)
}
remove_accents <- function(character) {
character <- gsub("á|à",a,character)
character <- gsub("é|è",a,character)
character <- gsub("í|ì",a,character)
character <- gsub("ó|ò",a,character)
character <- gsub("ú|ù",a,character)
}
standarize_text(c("Aasas éeeeé", "AASAS eeeee"))
standarize_text <- function(character) {
character <- tolower(character)
character <- remove_accents(character)
}
remove_accents <- function(character) {
character <- gsub("á|à",a,character)
character <- gsub("é|è",a,character)
character <- gsub("í|ì",a,character)
character <- gsub("ó|ò",a,character)
character <- gsub("ú|ù",a,character)
}
standarize_text(c("Aasas éeeeé", "AASAS eeeee"))
standarize_text <- function(character) {
character <- tolower(character)
character <- remove_accents(character)
}
remove_accents <- function(character) {
character <- gsub("á|à","a",character)
character <- gsub("é|è","e",character)
character <- gsub("í|ì","i",character)
character <- gsub("ó|ò","o",character)
character <- gsub("ú|ù","u",character)
}
standarize_text(c("Aasas éeeeé", "AASAS eeeee"))
standarize_text <- function(character) {
character <- tolower(character)
character <- remove_accents(character)
return(character)
}
remove_accents <- function(character) {
character <- gsub("á|à","a",character)
character <- gsub("é|è","e",character)
character <- gsub("í|ì","i",character)
character <- gsub("ó|ò","o",character)
character <- gsub("ú|ù","u",character)
return(character)
}
standarize_text(c("Aasas éeeeé", "AASAS eeeee"))
library(fdtools)
rm(list=ls())
ls()
library(fdtools)
install.packages("RColorBrewer")
install.packages("ggplot2")
library(fdtools)
library(fdtools)
library(fdtools)
library(survival)
lung
names(lung)
Surv(lung$time, lung$status) -> S
S
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R', echo=TRUE)
SF <- survfit(S ~ lung$sex)
plotSurv(SF)
plotSurv(SF, medians=TRUE)
SF <- survfit(S ~ 1)
plotSurv(SF, medians=TRUE)
summary(SF)
summary(SF)$table
summary(SF)$table[,"median"]
summary(SF)$table[,5]
summary(SF)$table
str(summary(SF)$table)
summary(SF)$table[5]
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R')
SF <- survfit(S ~ 1)
plotSurv(SF)
plotSurv(SF, medians=TRUE)
plotSurv(SF, median=TRUE)
plotSurv(SF, medians=TRUE)
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R')
plotSurv(SF, medians=TRUE)
library(fdtools)
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R')
library(fdtools)
TRUE && c(TRUE, TRUE)
TRUE & c(TRUE, TRUE)
TRUE && c(TRUE, TRUE)
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R')
?proto::proto
proto(ggplot2:::Stat, {
objname <- "stepribbon"
desc <- "Stepwise area plot"
desc_outputs <- list(
x = "stepped independent variable",
ymin = "stepped minimum dependent variable",
ymax = "stepped maximum dependent variable"
)
required_aes <- c( "x", "ymin", "ymax" )
default_geom <- function(.) GeomRibbon
default_aes <- function(.) aes( x = ..x.., ymin = ..y.., ymax = Inf )
calculate <- function( ., data, scales, direction = "hv", yvars = c( "ymin", "ymax" ), ...) {
stairstepn( data = data, direction = direction, yvars = yvars )
}
})->foo
foo
class(foo)
str(foo)
6+7.5+7.5+10/4
6+7.5+7.5+10*(1/4)
(6+7.5+7.5+10)*(1/4)
?ggplot::element_text
?ggplot2::element_text
library(fdtools)
library(fdtools)
library(fdtools)
theme_default
theme_default()
theme_grey()
library(fdtools)
thm()
thm
source('C:/Users/epidemiologia/OneDrive/RStudio/proyects/fdtools/R/plotSurv.R')
library(fdtools)
thm()
library(fdtools)
thm()
library(fdtools)
thm()
ls()
thm <- function() {
require(ggplot2)
c("#FFFFFF" ,"#F0F0F0" ,"#D9D9D9" ,"#BDBDBD" ,"#969696" ,"#737373" ,"#525252" ,"#252525", "#000000") -> grey_pal
theme(rect = element_rect(fill=grey_pal[2]), panel.grid.minor = element_blank(),
panel.background=element_rect(fill = grey_pal[2]),
panel.grid.major = element_line(color = grey_pal[3]), text = element_text(family = "mono"),
axis.ticks = element_blank(),
axis.text = element_text(size=14, color=grey_pal[8]),
axis.title.x = element_text(size=16, vjust=0),
axis.title.y = element_text(size=16, vjust=1))
}
thm()
thm <- function() {
require(ggplot2)
c("#FFFFFF" ,"#F0F0F0" ,"#D9D9D9" ,"#BDBDBD" ,"#969696" ,"#737373" ,"#525252" ,"#252525", "#000000") -> grey_pal
theme(rect = element_rect(fill=grey_pal[2]), panel.grid.minor = element_blank(),
panel.background=element_rect(fill = grey_pal[2]),
panel.grid.major = element_line(color = grey_pal[3]), text = element_text(family = "mono"),
axis.ticks = element_blank(),
axis.text = element_text(size=14, color=grey_pal[8]),
axis.title.x = element_text(size=16, vjust=0),
axis.title.y = element_text(size=16, vjust=1))
}
thm <- thm()
thm
thm()
library(fdtools)
ls()
rm(list=ls())
thm()
thmf
thm
library(fdtools)
thm_fd()
thm
ls()
theme
ggplot2::theme
str(ggplot2::theme)
names(ggplot2::theme)
?theme
library(fdtools)
library(fdtools)
APC
library(fdtools)
library(fdtools)
?survival::survdiff
survdiff(Surv(futime, fustat) ~ rx,data=ovarian)
library(survival)
survdiff(Surv(futime, fustat) ~ rx,data=ovarian)
plotSurv(survfit(Surv(futime, fustat) ~ rx,data=ovarian))
library(fdtools)
plotSurv(survfit(Surv(futime, fustat) ~ rx,data=ovarian))
plotSurv(survfit(Surv(futime, fustat) ~ rx,data=ovarian), ggargsCurve="fdtools::thm_fd()")
ovarian
plotSurv(survfit(Surv(futime, fustat) ~ ecog.ps,data=ovarian), ggargsCurve="fdtools::thm_fd()")
